<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Quote Dropper</title>
    <link rel="icon" type="image/jpeg" href="/templates/images/small-droplet-icon.jpeg">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f2f2f2;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Tab Navigation */
        .tab-nav {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            justify-content: center;
            border-bottom: 2px solid #ddd;
            padding-bottom: 10px;
        }
        
        .tab-button {
            display: inline-block;
            padding: 12px 20px;
            background-color: #3498db;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            cursor: pointer;
            text-align: center;
            font-weight: bold;
            border: none;
            font-size: 16px;
        }
        
        .tab-button:hover {
            background-color: #2980b9;
        }
        
        .tab-button.active {
            background-color: #2c3e50;
        }
        
        .nav-link {
            display: inline-block;
            padding: 10px 15px;
            background-color: #27ae60;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            margin-left: 10px;
            font-size: 14px;
        }
        
        .nav-link:hover {
            background-color: #219653;
        }

        /* Tab Content */
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }

        /* Quotes Management Styles */
        ul {
            list-style-type: none;
            padding: 0;
        }

        li {
            background-color: #fff;
            padding: 20px;
            margin: 10px 0;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        button {
            padding: 10px 16px;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        button.approve {
            background-color: #4CAF50;
        }

        button.dismiss {
            background-color: #FF5733;
        }

        button:hover {
            background-color: #45a049;
        }

        button.dismiss:hover,
        button.dismiss-all:hover {
            background-color: #FF5733;
        }

        button.dismiss-all {
            background-color: #FF5733;
        }

        .update {
            background-color: #3498db;
        }

        span {
            margin-left: 10px;
        }

        #approval_ {
            color: #4CAF50;
        }

        #dismissal_ {
            color: #FF5733;
        }

        .quote-info {
            margin-top: 10px;
        }

        input[type="text"] {
            width: calc(100% - 32px);
            padding: 8px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-bottom: 10px;
            color: #333;
        }

        /* Feedback Management Styles */
        .feedback-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            align-items: center;
        }

        .feedback-type {
            background-color: #e0e0e0;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 14px;
        }

        .type-general {
            background-color: #e0e0e0;
            color: #333;
        }

        .type-bug {
            background-color: #f8d7da;
            color: #721c24;
        }

        .type-feature {
            background-color: #d1ecf1;
            color: #0c5460;
        }

        .feedback-content {
            margin: 15px 0;
            white-space: pre-wrap;
        }

        .feedback-meta {
            color: #666;
            font-size: 14px;
        }

        .feedback-image {
            max-width: 100%;
            max-height: 300px;
            margin-top: 10px;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

        .empty-message {
            text-align: center;
            padding: 30px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
    </style>
    <script>
        // Tab navigation
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remove active class from all tab buttons
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabName + '-tab').classList.add('active');
            
            // Add active class to selected tab button
            event.target.classList.add('active');
            
            // Load data for the tab if needed
            if (tabName === 'feedback') {
                loadFeedback();
            }
        }

        // Quotes Management Functions
        function approveQuote(id) {
            // Get the edited values
            const editText = document.getElementById('edit_text_' + id).value;
            const editAuthor = document.getElementById('edit_author_' + id).value;
            const editClassification = document.getElementById('edit_classification_' + id).value;

            fetch('/admin/approve/' + id, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    edit_text: editText,
                    edit_author: editAuthor,
                    edit_classification: editClassification
                })
            })
                .then(response => {
                    if (response.ok) {
                        // Update UI to signify approval
                        document.getElementById('approval_' + id).innerText = '✔ Approved';
                    } else if (response.status === 409) {
                        // Display the error message if the edited quote is dismissed due to duplication
                        response.json().then(data => {
                            document.getElementById('dismissal_' + id).innerText = '✘ ' + data.message;
                        });
                    } else {
                        console.error('Failed to approve quote');
                    }
                })
                .catch(error => {
                    console.error('Error approving quote:', error);
                });
        }

        function dismissQuote(id) {
            fetch('/admin/dismiss/' + id, {
                method: 'POST'
            })
                .then(response => {
                    if (response.ok) {
                        // Update UI to signify dismissal
                        document.getElementById('dismissal_' + id).innerText = '✘ Dismissed';
                    } else {
                        console.error('Failed to dismiss quote');
                    }
                })
                .catch(error => {
                    console.error('Error dismissing quote:', error);
                });
        }

        function approveAllQuotes() {
            // Call the approveQuote function for each quote on the page
            document.querySelectorAll('.quote').forEach(quote => {
                const id = quote.dataset.id;
                approveQuote(id);
            });
        }

        function dismissAllQuotes() {
            // Call the dismissQuote function for each quote on the page
            document.querySelectorAll('.quote').forEach(quote => {
                const id = quote.dataset.id;
                dismissQuote(id);
            });
        }

        function searchQuotes() {
            const keyword = document.getElementById('searchInput').value;
            fetch(`/admin/search/${keyword}`)
                .then(response => response.json())
                .then(quotes => {
                    const searchResultsDiv = document.getElementById('searchResults');
                    searchResultsDiv.innerHTML = ''; // Clear previous search results
                    quotes.forEach(q => {
                        // Create HTML elements to display each quote
                        const quoteDiv = document.createElement('div');
                        quoteDiv.className = 'quote'; // Add class name for styling
                        quoteDiv.dataset.id = q.ID; // Set dataset ID
                        quoteDiv.innerHTML = `
                <p>ID: ${q.id}</p> <!-- Display the ID -->
                <input type="text" id="edit_text_${q.id}" value="${q.text}" />
                <input type="text" id="edit_author_${q.id}" value="${q.author}" />
                <input type="text" id="edit_classification_${q.id}" value="${q.classification}" />
                <p>Likes: ${q.likes}</p> <!-- Display the likes count -->
                <button onclick="updateQuote('${q.id}')" class="update">Update</button>
                <span id="update_status_${q.id}"></span>
            `;
                        searchResultsDiv.appendChild(quoteDiv);
                    });
                })
                .catch(error => {
                    console.error('Error searching quotes:', error);
                });
        }

        function updateQuote(id) {
            // Get the edited values
            const editText = document.getElementById('edit_text_' + id).value;
            const editAuthor = document.getElementById('edit_author_' + id).value;
            const editClassification = document.getElementById('edit_classification_' + id).value;

            fetch('/admin/edit/' + id, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    edit_text: editText,
                    edit_author: editAuthor,
                    edit_classification: editClassification
                })
            })
                .then(response => {
                    if (response.ok) {
                        // Update UI to signify update
                        document.getElementById('update_status_' + id).innerText = '✔ Updated';
                    } else {
                        console.error('Failed to update quote');
                    }
                })
                .catch(error => {
                    console.error('Error updating quote:', error);
                });
        }

        // Feedback Management Functions
        function loadFeedback() {
            const feedbackList = document.getElementById('feedback-list');
            
            // Check if feedback is already loaded
            if (feedbackList.querySelector('ul')) {
                return;
            }

            // Fetch feedback items from the server
            fetch('/admin/feedback')
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    }
                    throw new Error('Failed to load feedback');
                })
                .then(data => {
                    // Clear loading message
                    feedbackList.innerHTML = '';

                    if (data.length === 0) {
                        feedbackList.innerHTML = '<div class="empty-message">No feedback submissions found.</div>';
                        return;
                    }

                    // Create HTML for each feedback item
                    const feedbackItems = document.createElement('ul');
                    
                    data.forEach(item => {
                        const li = document.createElement('li');
                        
                        // Determine type class
                        let typeClass = 'type-general';
                        if (item.type === 'bug') typeClass = 'type-bug';
                        if (item.type === 'feature') typeClass = 'type-feature';
                        
                        // Format date
                        const date = new Date(item.created_at);
                        const formattedDate = date.toLocaleString();
                        
                        // Create feedback item HTML
                        li.innerHTML = `
                            <div class="feedback-header">
                                <span class="feedback-type ${typeClass}">${capitalizeFirstLetter(item.type)}</span>
                                <button onclick="deleteFeedback(${item.id})">Delete</button>
                            </div>
                            <div class="feedback-meta">
                                Submitted: ${formattedDate}
                                ${item.name ? ' by <strong>' + escapeHTML(item.name) + '</strong>' : ''}
                            </div>
                            <div class="feedback-content">${escapeHTML(item.content)}</div>
                            ${item.image_path ? `<img src="/${item.image_path}" alt="Feedback image" class="feedback-image">` : ''}
                        `;
                        
                        feedbackItems.appendChild(li);
                    });
                    
                    feedbackList.appendChild(feedbackItems);
                })
                .catch(error => {
                    console.error('Error:', error);
                    feedbackList.innerHTML = '<div class="empty-message">Error loading feedback. Please try again.</div>';
                });
        }

        function deleteFeedback(id) {
            if (confirm('Are you sure you want to delete this feedback?')) {
                fetch(`/admin/feedback/${id}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        // Reload just the feedback tab content
                        loadFeedback();
                    } else {
                        alert('Failed to delete feedback');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting feedback');
                });
            }
        }

        // Helper function to capitalize first letter
        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }

        // Helper function to escape HTML to prevent XSS
        function escapeHTML(str) {
            return str
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;');
        }
    </script>
</head>

<body>
    <div class="container">
        <h1>Admin Dashboard</h1>

        <!-- Tab Navigation -->
        <div class="tab-nav">
            <button class="tab-button active" onclick="showTab('quotes')">Quotes Management</button>
            <button class="tab-button" onclick="showTab('feedback')">Feedback Management</button>
            <a href="/submit-feedback" class="nav-link">Submit Feedback</a>
            <a href="/submit-quote" class="nav-link">Submit Quote</a>
        </div>

        <!-- Quotes Management Tab -->
        <div id="quotes-tab" class="tab-content active">
            <div class="search-container">
                <input type="text" id="searchInput" placeholder="Search quotes..." />
                <button onclick="searchQuotes()" class="update">Search</button>
            </div>

            <div id="searchResults">
                <!-- Search results will appear here -->
            </div>

            <h2>Pending Quotes</h2>
            <div class="actions">
                <button onclick="approveAllQuotes()" class="approve">Approve All</button>
                <button onclick="dismissAllQuotes()" class="dismiss-all">Dismiss All</button>
            </div>

            <ul>
                {{range .quotes}}
                <li class="quote" data-id="{{.ID}}">
                    <div class="quote-info">
                        <input type="text" id="edit_text_{{.ID}}" value="{{.Text}}" />
                        <input type="text" id="edit_author_{{.ID}}" value="{{.Author}}" />
                        <input type="text" id="edit_classification_{{.ID}}" value="{{.Classification}}" />
                    </div>

                    <div class="actions">
                        <button onclick="approveQuote('{{.ID}}')" class="approve">Approve</button>
                        <button onclick="dismissQuote('{{.ID}}')" class="dismiss">Dismiss</button>
                        <button onclick="updateQuote('{{.ID}}')" class="update">Update</button>
                        <span id="approval_{{.ID}}"></span>
                        <span id="dismissal_{{.ID}}"></span>
                        <span id="update_status_{{.ID}}"></span>
                    </div>
                </li>
                {{end}}
            </ul>
        </div>

        <!-- Feedback Management Tab -->
        <div id="feedback-tab" class="tab-content">
            <div id="feedback-list">
                <!-- Feedback items will be loaded here -->
                <div class="empty-message">Loading feedback submissions...</div>
            </div>
        </div>
    </div>
</body>

</html>