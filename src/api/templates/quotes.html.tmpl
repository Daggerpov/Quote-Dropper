<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}} - Quote Dropper</title>
    <link rel="icon" type="image/jpeg" href="/templates/images/small-droplet-icon.jpeg">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .header h1:hover {
            transform: scale(1.05);
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .search-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
        }

        .search-box {
            width: 100%;
            max-width: 500px;
            padding: 15px 20px;
            font-size: 1.1rem;
            border: none;
            border-radius: 25px;
            background: rgba(255, 255, 255, 0.9);
            color: #333;
            outline: none;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .search-box:focus {
            background: white;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }

        .search-box::placeholder {
            color: #666;
        }

        .navigation {
            text-align: center;
            margin-bottom: 30px;
        }

        .nav-link {
            display: inline-block;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 12px 24px;
            border-radius: 25px;
            text-decoration: none;
            margin: 5px 10px;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .nav-link:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        .nav-link.active {
            background: rgba(255, 255, 255, 0.4);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        .filter-section {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
        }

        .filter-row {
            margin-bottom: 15px;
        }

        .filter-row:last-child {
            margin-bottom: 0;
        }

        .filter-label {
            color: white;
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 10px;
            display: block;
        }

        .stats {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
            color: white;
        }

        .quote-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }

        .quote-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .quote-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

        .quote-card::before {
            content: '"';
            position: absolute;
            top: -10px;
            left: 15px;
            font-size: 6rem;
            color: #667eea;
            opacity: 0.1;
            font-family: serif;
        }

        .quote-text {
            font-size: 1.1rem;
            line-height: 1.6;
            margin-bottom: 20px;
            position: relative;
            z-index: 1;
            font-style: italic;
        }

        .quote-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }

        .quote-author {
            font-weight: 600;
            color: #667eea;
            font-size: 1rem;
        }

        .quote-classification {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .quote-likes {
            display: flex;
            align-items: center;
            gap: 5px;
            color: #666;
            font-size: 0.9rem;
        }

        .quote-id {
            position: absolute;
            top: 10px;
            right: 15px;
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
            padding: 3px 8px;
            border-radius: 10px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .empty-state {
            text-align: center;
            color: white;
            padding: 60px 20px;
        }

        .empty-state h2 {
            font-size: 2rem;
            margin-bottom: 15px;
            opacity: 0.9;
        }

        .empty-state p {
            font-size: 1.1rem;
            opacity: 0.7;
        }

        .hidden {
            display: none !important;
        }

        @media (max-width: 768px) {
            .quote-grid {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .quote-meta {
                flex-direction: column;
                align-items: flex-start;
            }

            .nav-link {
                margin: 3px 5px;
                padding: 10px 16px;
                font-size: 0.9rem;
            }
        }

        .heart {
            color: #e74c3c;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 onclick="window.location.href='/'" style="text-decoration: none;">üìù Quote Dropper</h1>
            <p>{{.Description}}</p>
        </div>

        <div class="search-container">
            <input type="text" class="search-box" id="searchBox" placeholder="Search quotes by text, author, or category...">
        </div>

        <div class="filter-section">
            <div class="filter-row">
                <span class="filter-label">Quote Length</span>
                <div class="navigation">
                    <a href="/quotes" class="nav-link" data-filter="length" data-value="all">All Quotes</a>
                    <a href="/quotes/maxQuoteLength=100" class="nav-link" data-filter="length" data-value="100">Short Quotes (‚â§100)</a>
                    <a href="/quotes/maxQuoteLength=60" class="nav-link" data-filter="length" data-value="60">Very Short (‚â§60)</a>
                </div>
            </div>
            <div class="filter-row">
                <span class="filter-label">Category</span>
                <div class="navigation" id="categoryNav">
                    <a href="/quotes" class="nav-link category-filter" data-filter="category" data-value="all">All Categories</a>
                    <!-- Categories will be loaded dynamically -->
                </div>
            </div>
            <div class="filter-row">
                <a href="/" class="nav-link">üè† Home</a>
            </div>
        </div>

        {{if .Stats}}
        <div class="stats" id="statsContainer">
            <strong id="statsCount">{{.Stats.Count}} quotes found</strong>
            {{if .Stats.MaxLength}} ‚Ä¢ Maximum length: {{.Stats.MaxLength}} characters{{end}}
            {{if .Stats.Classification}} ‚Ä¢ Category: {{.Stats.Classification}}{{end}}
        </div>
        {{end}}

        {{if .Quotes}}
        <div class="quote-grid" id="quoteGrid">
            {{range .Quotes}}
            <div class="quote-card" data-quote-text="{{.Text}}" data-quote-author="{{.Author}}" data-quote-classification="{{.Classification}}">
                <div class="quote-id">#{{.ID}}</div>
                <div class="quote-text">"{{.Text}}"</div>
                <div class="quote-meta">
                    <div class="quote-author">‚Äî {{if .Author}}{{.Author}}{{else}}Unknown{{end}}</div>
                    <div class="quote-classification">{{.Classification}}</div>
                    <div class="quote-likes">
                        <span class="heart">‚ô•</span> {{.Likes}}
                    </div>
                </div>
            </div>
            {{end}}
        </div>
        {{else}}
        <div class="empty-state" id="emptyState">
            <h2>No quotes found</h2>
            <p>Try adjusting your search criteria or browse all quotes.</p>
        </div>
        {{end}}
    </div>

    <script>
        // Search functionality
        const searchBox = document.getElementById('searchBox');
        const quoteCards = document.querySelectorAll('.quote-card');
        const statsContainer = document.getElementById('statsContainer');
        const statsCount = document.getElementById('statsCount');
        const emptyState = document.getElementById('emptyState');
        const quoteGrid = document.getElementById('quoteGrid');

        // Current filter state
        let currentLengthFilter = 'all';
        let currentCategoryFilter = 'all';

        // Load categories from API
        async function loadCategories() {
            try {
                const response = await fetch('/categories');
                const data = await response.json();
                const categoryNav = document.getElementById('categoryNav');
                
                if (data.categories && data.categories.length > 0) {
                    // Sort categories alphabetically
                    const sortedCategories = data.categories.sort();
                    
                    // Add category links
                    sortedCategories.forEach(category => {
                        const link = document.createElement('a');
                        link.href = `/quotes/classification=${category}`;
                        link.className = 'nav-link category-filter';
                        link.setAttribute('data-filter', 'category');
                        link.setAttribute('data-value', category);
                        link.textContent = category.charAt(0).toUpperCase() + category.slice(1);
                        categoryNav.appendChild(link);
                    });
                }
            } catch (error) {
                console.error('Failed to load categories:', error);
            }
        }

        // Set active filters based on current page
        function setActiveFilters() {
            const path = window.location.pathname;
            const urlParams = new URLSearchParams(window.location.search);
            
            // Determine current filters from URL
            if (path.includes('/maxQuoteLength=60')) {
                currentLengthFilter = '60';
            } else if (path.includes('/maxQuoteLength=100')) {
                currentLengthFilter = '100';
            } else {
                currentLengthFilter = 'all';
            }

            if (path.includes('/classification=')) {
                const categoryMatch = path.match(/\/classification=([^\/]+)/);
                if (categoryMatch) {
                    currentCategoryFilter = categoryMatch[1];
                }
            } else {
                currentCategoryFilter = 'all';
            }

            // Update active states
            document.querySelectorAll('.nav-link[data-filter="length"]').forEach(link => {
                link.classList.toggle('active', link.getAttribute('data-value') === currentLengthFilter);
            });

            document.querySelectorAll('.nav-link[data-filter="category"]').forEach(link => {
                link.classList.toggle('active', link.getAttribute('data-value') === currentCategoryFilter);
            });
        }

        // Handle filter clicks
        function handleFilterClick(event) {
            const link = event.target;
            const filter = link.getAttribute('data-filter');
            const value = link.getAttribute('data-value');

            if (!filter) return;

            event.preventDefault();

            // Update current filter state
            if (filter === 'length') {
                currentLengthFilter = value;
            } else if (filter === 'category') {
                currentCategoryFilter = value;
            }

            // Generate new URL
            let newPath = '/quotes';
            
            // Add category filter if not 'all'
            if (currentCategoryFilter !== 'all') {
                newPath += `/classification=${currentCategoryFilter}`;
            }
            
            // Add length filter if not 'all'
            if (currentLengthFilter !== 'all') {
                newPath += `/maxQuoteLength=${currentLengthFilter}`;
            }

            // Navigate to new URL
            window.location.href = newPath;
        }

        function performSearch() {
            const searchTerm = searchBox.value.toLowerCase().trim();
            let visibleCount = 0;

            quoteCards.forEach(card => {
                const text = card.getAttribute('data-quote-text').toLowerCase();
                const author = card.getAttribute('data-quote-author').toLowerCase();
                const classification = card.getAttribute('data-quote-classification').toLowerCase();

                const matches = text.includes(searchTerm) || 
                               author.includes(searchTerm) || 
                               classification.includes(searchTerm);

                if (matches || searchTerm === '') {
                    card.classList.remove('hidden');
                    visibleCount++;
                } else {
                    card.classList.add('hidden');
                }
            });

            // Update stats
            if (statsContainer) {
                if (searchTerm === '') {
                    statsCount.textContent = "{{.Stats.Count}} quotes found";
                } else {
                    statsCount.textContent = visibleCount + " quotes found";
                }
            }

            // Show/hide empty state
            if (visibleCount === 0 && searchTerm !== '') {
                if (emptyState) {
                    emptyState.classList.remove('hidden');
                    emptyState.querySelector('h2').textContent = 'No quotes match your search';
                    emptyState.querySelector('p').textContent = 'Try different keywords or clear your search.';
                }
                if (quoteGrid) {
                    quoteGrid.style.display = 'none';
                }
            } else {
                if (emptyState) {
                    emptyState.classList.add('hidden');
                }
                if (quoteGrid) {
                    quoteGrid.style.display = 'grid';
                }
            }
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadCategories().then(() => {
                setActiveFilters();
                
                // Add click handlers to filter links
                document.addEventListener('click', function(event) {
                    if (event.target.classList.contains('nav-link') && 
                        (event.target.getAttribute('data-filter') === 'length' || 
                         event.target.getAttribute('data-filter') === 'category')) {
                        handleFilterClick(event);
                    }
                });
            });
        });

        // Add event listener for real-time search
        searchBox.addEventListener('input', performSearch);

        // Add keyboard shortcut for search (Ctrl/Cmd + K)
        document.addEventListener('keydown', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                searchBox.focus();
            }
        });
    </script>
</body>
</html> 