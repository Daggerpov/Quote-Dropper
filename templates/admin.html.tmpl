<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Page</title>
    <link rel="icon" type="image/png" href="templates/small-droplet-icon.png">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f2f2f2;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        ul {
            list-style-type: none;
            padding: 0;
        }

        li {
            background-color: #fff;
            padding: 20px;
            margin: 10px 0;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        button {
            padding: 10px 16px;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        button.approve {
            background-color: #4CAF50;
        }

        button.dismiss {
            background-color: #FF5733;
        }

        button:hover {
            background-color: #45a049;
        }

        span {
            margin-left: 10px;
        }

        #approval_ {
            color: #4CAF50;
        }

        #dismissal_ {
            color: #FF5733;
        }

        /* Adjustments for spacing */
        .quote-info {
            margin-top: 10px;
            /* Increased margin-top */
        }

        /* Styling for text boxes */
        input[type="text"] {
            width: calc(100% - 32px);
            /* Adjusted width to account for padding */
            padding: 8px;
            /* Added padding */
            font-size: 16px;
            /* Increased font size */
            border: 1px solid #ccc;
            /* Added border */
            border-radius: 4px;
            /* Added border-radius */
            margin-bottom: 10px;
            /* Added margin-bottom */
            color: #333;
            /* Text color */
        }

        /* Override hover effect for dismiss and dismiss all buttons */
        button.dismiss:hover,
        button.dismiss-all:hover {
            background-color: #FF5733;
        }

        /* Additional styling for dismiss all button */
        button.dismiss-all {
            background-color: #FF5733;
        }
    </style>
    <script>
        function approveQuote(id) {
            // Get the edited values
            const editText = document.getElementById('edit_text_' + id).value;
            const editAuthor = document.getElementById('edit_author_' + id).value;
            const editClassification = document.getElementById('edit_classification_' + id).value;

            fetch('/admin/approve/' + id, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    edit_text: editText, // <-- Use 'edit_text' instead of 'text'
                    edit_author: editAuthor, // <-- Use 'edit_author' instead of 'author'
                    edit_classification: editClassification // <-- Use 'edit_classification' instead of 'classification'
                })
            })
                .then(response => {
                    if (response.ok) {
                        // Update UI to signify approval
                        document.getElementById('approval_' + id).innerText = '✔ Approved';
                    } else if (response.status === 409) {
                        // Display the error message if the edited quote is dismissed due to duplication
                        response.json().then(data => {
                            document.getElementById('dismissal_' + id).innerText = '✘ ' + data.message;
                        });
                    } else {
                        console.error('Failed to approve quote');
                    }
                })
                .catch(error => {
                    console.error('Error approving quote:', error);
                });
        }

        function dismissQuote(id) {
            fetch('/admin/dismiss/' + id, {
                method: 'POST'
            })
                .then(response => {
                    if (response.ok) {
                        // Update UI to signify dismissal
                        document.getElementById('dismissal_' + id).innerText = '✘ Dismissed';
                    } else {
                        console.error('Failed to dismiss quote');
                    }
                })
                .catch(error => {
                    console.error('Error dismissing quote:', error);
                });
        }


        function approveAllQuotes() {
            // Call the approveQuote function for each quote on the page
            document.querySelectorAll('.quote').forEach(quote => {
                const id = quote.dataset.id;
                approveQuote(id);
            });
        }

        function dismissAllQuotes() {
            // Call the dismissQuote function for each quote on the page
            document.querySelectorAll('.quote').forEach(quote => {
                const id = quote.dataset.id;
                dismissQuote(id);
            });
        }

        function searchQuotes() {
            const keyword = document.getElementById('searchInput').value;
            fetch(`/admin/search/${keyword}`)
                .then(response => response.json())
                .then(quotes => {
                    const searchResultsDiv = document.getElementById('searchResults');
                    searchResultsDiv.innerHTML = ''; // Clear previous search results
                    quotes.forEach(q => {
                        // Create HTML elements to display each quote
                        const quoteDiv = document.createElement('div');
                        quoteDiv.className = 'quote'; // Add class name for styling
                        quoteDiv.dataset.id = q.ID; // Set dataset ID
                        quoteDiv.innerHTML = `
                <input type="text" id="edit_text_${q.ID}" value="${q.text}" />
                <input type="text" id="edit_author_${q.ID}" value="${q.author}" />
                <input type="text" id="edit_classification_${q.ID}" value="${q.classification}" />
                <p>Likes: ${q.likes}</p> <!-- Display the likes count -->
                <button onclick="updateQuote('${q.ID}')" class="update">Update</button>
                <span id="update_status_${q.ID}"></span>
            `;
                        searchResultsDiv.appendChild(quoteDiv);
                    });
                })
                .catch(error => {
                    console.error('Error searching quotes:', error);
                });
        }

        function editQuote(id) {
            // Populate input fields with current quote information
            const text = document.getElementById('edit_text_' + id).value;
            const author = document.getElementById('edit_author_' + id).value;
            const classification = document.getElementById('edit_classification_' + id).value;

            // Set the current quote information to input fields
            document.getElementById('edit_text_' + id).value = text;
            document.getElementById('edit_author_' + id).value = author;
            document.getElementById('edit_classification_' + id).value = classification;
        }

        function updateQuote(id) {
            // Get the edited values
            const editText = document.getElementById('edit_text_' + id).value;
            const editAuthor = document.getElementById('edit_author_' + id).value;
            const editClassification = document.getElementById('edit_classification_' + id).value;

            fetch('/admin/edit/' + id, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    edit_text: editText, // <-- Use 'edit_text' instead of 'text'
                    edit_author: editAuthor, // <-- Use 'edit_author' instead of 'author'
                    edit_classification: editClassification // <-- Use 'edit_classification' instead of 'classification'
                })
            })
                .then(response => {
                    if (response.ok) {
                        // Update UI to signify successful update
                        document.getElementById('update_status_' + id).innerText = '✔ Quote updated';
                    } else {
                        console.error('Failed to update quote');
                    }
                })
                .catch(error => {
                    console.error('Error updating quote:', error);
                });
        }

        // Function to submit a new quote
        function submitQuote(event) {
            event.preventDefault(); // Prevent the default form submission

            const quoteText = document.getElementById('quoteText').value;
            const quoteAuthor = document.getElementById('quoteAuthor').value;
            const quoteClassification = document.getElementById('quoteClassification').value;

            fetch('https://quote-dropper-production.up.railway.app/quotes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    text: quoteText,
                    author: quoteAuthor,
                    classification: quoteClassification
                })
            })
                .then(response => {
                    if (response.ok) {
                        // Quote successfully added
                        document.getElementById('submission_message').innerText = 'Quote successfully added!';
                        // Clear form fields
                        document.getElementById('quoteText').value = '';
                        document.getElementById('quoteAuthor').value = '';
                        document.getElementById('quoteClassification').value = 'wisdom'; // Reset category to "wisdom"
                    } else {
                        // Error adding quote
                        document.getElementById('submission_message').innerText = 'Failed to add quote. Please try again.';
                    }
                })
                .catch(error => {
                    console.error('Error adding quote:', error);
                    document.getElementById('submission_message').innerText = 'An error occurred. Please try again later.';
                });
        }


        // Add event listener for form submission
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('quoteForm').addEventListener('submit', submitQuote);
        });

        function searchOnEnter(event) {
            if (event.key === "Enter") {
                searchQuotes();
            }
        }
    </script>
</head>

<body>
    <h1>Admin Page</h1>

    <form id="quoteForm">
        <input type="text" id="quoteText" placeholder="Quote Text">
        <input type="text" id="quoteAuthor" placeholder="Author">
        <select id="quoteClassification">
            <option value="wisdom">Wisdom</option>
            <option value="motivation">Motivation</option>
            <option value="discipline">Discipline</option>
            <option value="philosophy">Philosophy</option>
            <option value="inspiration">Inspiration</option>
            <option value="upliftment">Upliftment</option>
            <option value="love">Love</option>
        </select>
        <button type="submit">Submit</button>
        <span id="submission_message"></span> <!-- Display submission message here -->
    </form>

    </br></br>

    <!-- Search bar -->
    <input type="text" id="searchInput" placeholder="Search by keyword" onkeydown="searchOnEnter(event)">
    <button onclick="searchQuotes()">Search</button>

    <div id="searchResults">
        <!-- Search results will be displayed here -->
    </div>

    {{if not .quotes}}
    <p>No quotes available.</p>
    {{else}}
    <button onclick="approveAllQuotes()" class="approve-all">Approve All Quotes</button>
    <button onclick="dismissAllQuotes()" class="dismiss-all">Dismiss All Quotes</button>

    </br></br>


    <ul>
        {{range .quotes}}
        <li class="quote" data-id="{{.ID}}">
            <!-- Editable fields -->
            <input type="text" id="edit_text_{{.ID}}" value="{{.Text}}" />
            <input type="text" id="edit_author_{{.ID}}" value="{{.Author}}" />
            <input type="text" id="edit_classification_{{.ID}}" value="{{.Classification}}" />
            <div class="quote-info"> <!-- Added class for styling -->
                <button onclick="approveQuote('{{.ID}}')" class="approve">Approve</button>
                <button onclick="dismissQuote('{{.ID}}')" class="dismiss">Dismiss</button>
                <span id="approval_{{.ID}}"></span>
                <span id="dismissal_{{.ID}}"></span>
                <!-- <button onclick="editQuote('{{.ID}}')">Edit</button> Add an edit button -->
                <button onclick="updateQuote('{{.ID}}')" class="update">Update</button> <!-- Add an update button -->
                <span id="update_status_{{.ID}}"></span> <!-- Display update status -->
            </div>
        </li>
        {{end}}
    </ul>
    {{end}}
</body>

</html>